#!/bin/sh

# Copyright 2015-2019 Yury Gribov
# 
# Use of this source code is governed by MIT license that can be
# found in the LICENSE.txt file.

set -eu

# Based on https://misc.flogisoft.com/bash/tip_colors_and_formatting
END_COLOR='\033[0m'
BLACK='\033[30m'
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
BLUE='\033[34m'
MAGENTA='\033[35m'
CYAN='\033[36m'
WHITE='\033[97m'
UNDER='\033[2m'

absolutize() {
  test -e "$1"
  (cd "$(dirname "$1")"; echo $PWD/$(basename "$1"))
}

error() {
  prefix="error:"
  if test -t 2; then
    prefix="${RED}${prefix}${END_COLOR}"
  fi
  printf "$(basename $0): $prefix $@\\n" >&2
  exit 1
}

warn() {
  prefix="warning:"
  if test -t 2; then
    prefix="${RED}${prefix}${END_COLOR}"
  fi
  printf "$(basename $0): $prefix $@\\n" >&2
}

mkcleandir() {
  mkdir -p "$1"
  rm -rf "$1"/*
}

isemptydir() {
  #test $(ls -A "$1" | wc -l) = 0
  test -d "$1" && test "$(find "$1" -maxdepth 0 -empty)"
}

strip_ext() {
#  echo "$1" | sed -e 's!\.[^.]*$!!'
  echo "${1%.*}"
}

# Get the only file matching regex in directory or abort
get_the_match() {
  local N=$(ls -1 "$1" | grep "$2" | wc -l)
  case $N in
  0)
    echo >&2 "No matches for '$2' in $1"
    exit 1
    ;;
  1)
    ls -1 "$1" | grep "$2" | xargs basename
    ;;
  *)
    echo >&2 "Too many matches for '$2' in $1"
    exit 1
  esac
}

usage() {
  cat <<EOF
Usage: $(basename $0) [OPT]... ARG
Describe script here.

Options:
  --flag, -f        Describe flag here.
  --param=P, -p P   Describe scalar parameter here.
  --multi=P, -m P   Describe array parameter here
                    (can be specified more than once).
  --help, -h        Print help and exit.
  --verbose, -v     Print diagnostic info
                    (can be specified more than once).
  -x                Enable shell tracing.

Examples:
  \$ $(basename $0) -f ROOT
EOF
  exit
}

usage_short() {
  cat >&2 <<EOF
Usage: $(basename $0) [OPT]... ARG
Run \`$(basename $0) -h' for more details.
EOF
  exit 1
}

# Log to $me.log
if test "${1:-}" != __tee; then
  # Redirect to tee
  (exec "$0" __tee 2>&1; rc=$?) | tee $(basename $0).log
  exit $rc
fi

me=$(basename $0)

ARGS=$(getopt -o 'p:m:fhvx' --long 'param:,multi:,flag,verbose,help' -n "$(basename $0)" -- "$@")
eval set -- "$ARGS"

FLAG=
PARAM=
MULTI=
V=0

while true; do
  case "$1" in
    -f | --flag)
      FLAG=1
      shift
      ;;
    -p | --param)
      PARAM="$2"
      shift 2
      ;;
    -m | --multi)
      MULTI="$MULTI $2"
      shift 2
      ;;
    -h | --help)
      usage
      ;;
    -v | --verbose)
      V=$((V + 1))
      shift
      ;;
    -x)
      set -x
      shift
      ;;
    --)
      shift
      break
      ;;
    -*)
      error "unknown option: $1"
      ;;
    *)
      error 'internal error'
      ;;
  esac
done

test $# -gt 0 || usage_short

TMP=$(mktemp -d)
trap "rm -rf $TMP" EXIT
