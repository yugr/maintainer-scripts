#!/bin/sh

# Copyright 2015-2022 Yury Gribov
# 
# Use of this source code is governed by MIT license that can be
# found in the LICENSE.txt file.

# This script bootstraps normal and patched versions of GCC,
# runs regression tests and compares results.
#
# Prerequisites: autogen dejagnu
# 
# TODO: rewrite to use Makefiles

set -eu

absolutize() {
  test -e "$1"
  (cd $(dirname "$1"); echo $PWD/$(basename "$1"))
}

error() {
  echo >&2 "$(basename $0): error: $@"
  exit 1
}

mkcleandir() {
  mkdir -p "$1"
  rm -rf "$1"/*
}

isemptydir() {
  #test $(ls -A "$1" | wc -l) = 0
  test -d "$1" && test $(find -L "$1" -maxdepth 0 -empty)
}

P=x86_64-unknown-linux-gnu

gcc_configure() {
  SRC=$1
  BUILD=$2

  sleep 1

  cd $BUILD
  if ! isemptydir .; then
    error 'build directory not empty'
  fi

  # TODO: --enable-checking=all ?
  nice $SRC/configure --enable-checking --enable-bootstrap \
    --target=$P --host=$P --build=$P \
    $CFGFLAGS
}

gcc_build() {
  BUILD=$1
  NJOBS=$2
  nice make -C $BUILD -j$NJOBS
}

gcc_check() {
  BUILD=$1
  NJOBS=$2
  nice make -C $BUILD -j$NJOBS -k check || true
}

gcc_compare() {
  SRC=$1
  BUILD=$2
  BUILD_P=$3
  for sum in $(cd $BUILD; find -name \*.sum); do
    echo "========== Comparing $sum"
    $SRC/contrib/dg-cmp-results.sh -v -v \* $BUILD/$sum $BUILD_P/$sum
  done 2>&1
}

is_gcc_dir() {
  test -d "$1" && test -f "$1"/gcc/gcc.h
}

tic() {
  TIME_START=$(date +%s)
  # Would be nice to re-use TIME_START/END but `date -d' fails
  # with "date: invalid date ‘Sun 22 Jan 12:00 GMT 2017’" on some machines
  echo "Started $1: $(date)" >> $OUT/times.log
}

toc() {
  TIME_END=$(date +%s)
  echo "Finished $1: $(date)" >> $OUT/times.log
  DT=$((TIME_END - TIME_START))
  echo "Total time is $((DT / 60)) minutes." >> $OUT/times.log
}

killtree() {
  local status

  status=0

  # Stop parent so that it does not respawn children
  kill -s SIGSTOP $1 || status=1

  for kid in $(ps -o pid --no-headers --ppid $1); do
    killtree $kid $2 || status=1
  done

  # Need to continue stopped process so that system can kill it
  kill -$2 $1 && kill -s SIGCONT $1 || status=1

  return $status
}

killkids() {
  for kid in $(ps -o pid --no-headers --ppid $$); do
    killtree $kid TERM
  done
}

me=$(basename $0)

help() {
  cat <<EOF
Usage: $me [OPTIONS] [SRC_REF] [ SRC_PATCHED | PATCH | BRANCH ]
Verifies GCC patch against reference codebase.

If SRC_REF is not specified, current directory is taken
as reference.

Patch can be either separate directory, .patch or branch
in SRC_REF (SRC_REF must be Git repo in this case).

Options are
  -h, --help      Print this message and exit.
  -o DIR
  --output DIR    Put temporary files to DIR, instead of TMP.
  -j N            Use N jobs (default is 1.5*numcores).
  --cfg-flags F   Append F to GCC configure flags.
EOF
}

if [ $# -eq 0 ]; then
  echo "Syntax: $me [config-flags] [PATH | DIR | BRANCH]"
  echo "To override default tmp dir use OUT environment variable."
  exit 1
fi

ARGS=$(getopt -o 'o:j:h' --long 'cfg-flags:,output:,help' -n $(basename $0) -- "$@")
eval set -- "$ARGS"

CFGFLAGS=
OUT=${TMPDIR:-/tmp}/$me-$USER-$$

NJOBS=$(( $(nproc) * 3 / 2 ))
NJOBS=$((NJOBS / 2))
if [ $NJOBS = 0 ]; then
  NJOBS=1
fi

while true; do
  case "$1" in
    -j)
      NJOBS="$2"
      shift 2
      ;;
    --cfg-flags)
      CFGFLAGS="$CFGFLAGS $2"
      shift 2
      ;;
    -o | --output)
      OUT=$(absolutize "$2")
      shift 2
      ;;
    -h | --help)
      help
      exit 0
      ;;
    --)
      shift
      break
      ;;
    -*)
      error "unknown option: $1"
      ;;
    *)
      error 'internal error'
      ;;
  esac
done

if test $# = 2; then
  SRC=$(absolutize "$1")
  PATCH="$2"
  if ! test -d "$SRC"; then
    error "reference directory $SRC does not exist"
  fi
elif test $# = 1; then
  SRC=$PWD
  PATCH="$1"
else
  error "too many positional arguments"
fi

if test -f "$PATCH" && file "$PATCH" | grep -q 'diff output'; then
  # That's a plain patch
  PATCH=$(absolutize "$PATCH")
elif is_gcc_dir "$PATCH"; then
  # That's a directory with sources
  PATCH=$(absolutize "$PATCH")
elif git --git-dir=$SRC/.git rev-parse -q --verify $PATCH > /dev/null; then
  # That's branch name
  :
else
  error "I can't make sense of $PATCH"
fi

if ! is_gcc_dir $SRC; then
  error "reference directory $SRC is not a GCC dir"
fi

if [ -d $SRC/.git ]; then
  if [ master != $(git --git-dir=$SRC/.git rev-parse --abbrev-ref HEAD) ]; then
    echo >&2 "Current branch in reference directory $SRC is not master!"
  fi
fi

mkcleandir $OUT
echo "Temporary files will be stored in $OUT"

BUILD=$OUT/build-orig
mkdir $BUILD

BUILD_P=$OUT/build-patched
mkdir $BUILD_P

#if [ ! -d $SRC/mpfr -o ! -d $SRC/gmp -o ! -d $SRC/mpc -o ! -d $SRC/isl -o ! -d $SRC/cloog ]; then
#  echo 'Downloading libs...'
#  ( cd $SRC; contrib/download_prerequisites )
#fi

if [ -d $PATCH ]; then
  SRC_P=$PATCH
else
  SRC_P=$OUT/src-patched
  echo 'Copying...'
  mkcleandir $SRC_P
  if [ -f $PATCH ]; then
    cp -r $SRC/* $SRC_P
    patch -d $SRC_P -p1 < $PATCH
  else
    git --git-dir=$SRC/.git archive $PATCH | tar -x -C $SRC_P
    find -L $SRC_P | xargs touch -r $SRC_P
  fi
fi

trap "echo 'Encountered error, killing children...'; killkids" EXIT INT TERM

echo 'Configuring...'
gcc_configure $SRC $BUILD > $OUT/configure-orig.log 2>&1 &
gcc_configure $SRC_P $BUILD_P > $OUT/configure-patched.log 2>&1 &
wait %2
wait %1

echo 'Building...'
tic build
gcc_build $BUILD $NJOBS > $OUT/build-orig.log 2>&1 &
gcc_build $BUILD_P $NJOBS > $OUT/build-patched.log 2>&1 &
wait %2
wait %1
toc build

# GCC people ask us to test i386 as well...
echo 'Checking (32-bit)...'
tic 'checking (32-bit)'
RUNTESTFLAGS='--target_board="unix/-m32"' gcc_check $BUILD $NJOBS > $OUT/check-orig-32.log 2>&1 &
RUNTESTFLAGS='--target_board="unix/-m32"' gcc_check $BUILD_P $NJOBS > $OUT/check-patched-32.log 2>&1 &
wait %2
wait %1
gcc_compare $SRC $BUILD $BUILD_P | tee $OUT/compare-32.log
toc 'checking (32-bit)'

echo 'Checking...'
tic checking
gcc_check $BUILD $NJOBS > $OUT/check-orig.log 2>&1 &
gcc_check $BUILD_P $NJOBS > $OUT/check-patched.log 2>&1 &
wait %2
wait %1
gcc_compare $SRC $BUILD $BUILD_P | tee $OUT/compare.log
toc checking

trap '' EXIT INT TERM
